import OpenAI from 'openai'
import { getDatabase } from '../../../dist/config/database.js'
import { intelligentBotSystem } from './intelligentBotSystem.js'

let openai = null
try {
  if (process.env.OPENAI_API_KEY) {
    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    })
  }
} catch (error) {
  console.log('‚ö†Ô∏è OpenAI n√£o configurado, usando fallback')
}

let db = null
try {
  db = getDatabase()
} catch (error) {
  console.log('‚ö†Ô∏è Database n√£o conectado ainda')
}

const ADMIN_PHONE = process.env.ADMIN_PHONE || '554199509644'

/**
 * üõ°Ô∏è BOT VIGIA - Sistema anti-inven√ß√£o para validar respostas
 * Detecta quando o bot inventa informa√ß√µes que n√£o existem
 */
class BotVigia {
  constructor() {
    try {
      this.createVigiaTable()
    } catch (error) {
      console.log('‚ö†Ô∏è VIGIA: Erro ao criar tabela:', error.message)
    }
  }

  /**
   * üîç An√°lise principal: detecta se o bot est√° inventando informa√ß√µes
   */
  async validateResponse(phone, userMessage, botResponse, conversationHistory = []) {
    try {
      console.log(`üõ°Ô∏è VIGIA: Analisando resposta para ${phone}`)
      
      // 1. Buscar dados reais do sistema para compara√ß√£o
      const realData = await this.getRealSystemData(phone)
      
      // 2. Analisar com GPT se a resposta cont√©m inven√ß√µes
      const analysis = await this.analyzeForInventions(userMessage, botResponse, realData)
      
      console.log(`üõ°Ô∏è VIGIA: ${analysis.approved ? 'APROVADO' : 'REJEITADO'} (${analysis.confidence}%)`)
      
      return analysis
      
    } catch (error) {
      console.error('‚ùå VIGIA: Erro na an√°lise:', error)
      
      // Em caso de erro, notifica admin mas aprova por seguran√ßa
      await this.notifyAdmin('error', `Erro no vigia: ${error.message}`, phone)
      
      return {
        approved: true,
        confidence: 0,
        reason: 'Erro no sistema - aprovado por seguran√ßa',
        severity: 'high'
      }
    }
  }

  /**
   * üß† NOVA AN√ÅLISE INTEGRADA - Usa sistema inteligente com ML + hist√≥rico completo
   */
  async checkMessage(phone, userMessage, botResponse) {
    try {
      console.log(`üõ°Ô∏è VIGIA: Iniciando an√°lise integrada para ${phone}`)
      
      // Usar o sistema inteligente integrado
      const result = await intelligentBotSystem.analyzeMessage(phone, userMessage, botResponse)
      
      // Log da an√°lise
      await this.logAnalysis(phone, userMessage, botResponse, result)
      
      // Se n√£o aprovado, notificar admin
      if (!result.approved) {
        await this.notifyAdmin(phone, result, userMessage, botResponse)
      }
      
      return {
        approved: result.approved,
        confidence: result.confidence,
        reason: result.reason,
        severity: result.severity || 'medium',
        corrections: result.corrections || [],
        smartPrice: result.smartPrice,
        metrics: result.metrics
      }
      
    } catch (error) {
      console.error('‚ùå VIGIA: Erro na an√°lise:', error)
      return {
        approved: true,
        confidence: 0,
        reason: 'Erro no sistema - aprovado por seguran√ßa',
        severity: 'high'
      }
    }
  }

  /**
   * üìä Busca dados reais do sistema para valida√ß√£o
   */
  async getRealSystemData(phone) {
    try {
            // Buscar dados reais das cidades COD
      const codCities = await this.getRealCodCities()
      
      // Buscar dados reais do produto
      const productData = await this.getRealProductData()
      
      // Buscar dados reais da campanha
      const campaignData = await this.getRealCampaignData(phone)
      
      // Buscar informa√ß√µes da conversa
      const conversationContext = await this.extractConversationContext(phone)
      
      return {
        codCities,
        productData,
        campaignData,
        validDeliveryInfo: this.getValidDeliveryInfo()
      }
    } catch (error) {
      console.error('‚ùå VIGIA: Erro ao buscar dados reais:', error)
      return {
        codCities: [],
        productData: null,
        campaignData: null,
        validDeliveryInfo: []
      }
    }
  }

  /**
   * üèôÔ∏è Busca cidades COD reais do sistema
   */
  async getRealCodCities() {
    try {
      // Lista das 70 cidades COD REAIS do sistema
      return [
        "S√£o Paulo - SP", "Tabo√£o da Serra - SP", "S√£o Bernardo do Campo - SP", "Osasco - SP", 
        "Guarulhos - SP", "Diadema - SP", "Santo Andr√© - SP", "Itapecerica da Serra - SP",
        "Carapicu√≠ba - SP", "Itaquaquecetuba - SP", "Barueri - SP", "Mau√° - SP",
        "Ferraz de Vasconcelos - SP", "S√£o Caetano do Sul - SP", "Suzano - SP", "Cotia - SP",
        "Embu das Artes - SP", "Po√° - SP", "Itapevi - SP", "Jandira - SP", "Mogi das Cruzes - SP",
        "Recife - PE", "Olinda - PE", "Jaboat√£o dos Guararapes - PE", "Camaragibe - PE",
        "Paulista - PE", "Abreu e Lima - PE", "Goi√¢nia - GO", "Senador Canedo - GO",
        "Aparecida de Goi√¢nia - GO", "Trindade - GO", "Goianira - GO", "Fortaleza - CE",
        "Caucaia - CE", "Maracana√∫ - CE", "Eus√©bio - CE", "Pacatuba - CE", "Maranguape - CE",
        "Rio de Janeiro - RJ", "Niter√≥i - RJ", "Duque de Caxias - RJ", "S√£o Jo√£o de Meriti - RJ",
        "Nil√≥polis - RJ", "Mesquita - RJ", "Nova Igua√ßu - RJ", "S√£o Gon√ßalo - RJ", "Queimados - RJ",
        "Salvador - BA", "Lauro de Freitas - BA", "Sim√µes Filho - BA", "Cama√ßari - BA",
        "Belo Horizonte - MG", "Nova Lima - MG", "Sarzedo - MG", "Contagem - MG", "Betim - MG",
        "Ribeir√£o das Neves - MG", "Sabar√° - MG", "Ibirit√© - MG", "Santa Luzia - MG",
        "Porto Alegre - RS", "Canoas - RS", "Esteio - RS", "S√£o Leopoldo - RS",
        "Novo Hamburgo - RS", "Gravata√≠ - RS", "Sapucaia do Sul - RS", "Viam√£o - RS",
        "Cachoeirinha - RS", "Alvorada - RS"
      ]
    } catch (error) {
      return []
    }
  }

  /**
   * üè∑Ô∏è Busca dados reais do produto
   */
  async getRealProductData() {
    return {
      names: [
        'Calcinha Lipo Modeladora Premium',
        'Calcinha Modeladora ShapeFit',
        'Calcinha Modeladora Premium',
        'Calcinha Lipo ShapeFit'
      ],
      description: 'Calcinha modeladora premium com tecnologia avan√ßada que modela a cintura, n√£o marca a roupa e oferece m√°ximo conforto',
      category: 'lingerie',
      colors: ['bege', 'preta'],
      sizes: ['P', 'M', 'G', 'GG'],
      features: [
        'modela a cintura e barriga',
        'n√£o marca a roupa',
        'tecido respir√°vel',
        'alta compress√£o',
        'conforto durante todo o dia',
        'tecnologia modeladora avan√ßada',
        'costura invis√≠vel'
      ],
      originalPrices: {
        1: 129.90,
        2: 199.90,
        3: 259.90,
        4: 319.90,
        6: 479.90
      },
      smartPrices: {
        1: [89.90, 97.00],
        2: [119.90, 129.90, 139.90, 147.00],
        3: [159.90, 169.90, 179.90, 187.00],
        4: [239.90],
        6: [359.90]
      },
      skus: {
        1: 'LIPO-1UN',
        2: 'LIPO-2UN',
        3: 'LIPO-3UN',
        4: 'LIPO-4UN',
        6: 'LIPO-6UN'
      },
      benefits: [
        'modela instantaneamente',
        'uso invis√≠vel por baixo da roupa',
        'conforto o dia todo',
        'melhora a postura',
        'autoestima elevada'
      ],
      paymentRules: {
        codCities: 'Pagamento na entrega (sem frete)',
        otherCities: 'Pagamento antecipado - OBRIGAT√ìRIO pedir CPF para pagamento'
      }
    }
  }

  /**
   * üè∑Ô∏è Busca dados reais do produto
   */
  async getProductContext(phone) {
    try {
      // Buscar informa√ß√µes do produto baseado no lead/campanha
      const db = getDatabase()
      const leadInfo = db.prepare(`
        SELECT phone, created_at
        FROM leads
        WHERE phone = ?
        ORDER BY created_at DESC
        LIMIT 1
      `).get(phone)
      
      // Sempre retorna o produto padr√£o por enquanto
      return 'Calcinha Modeladora ShapeFit - produto de modelagem corporal'
    } catch (error) {
      console.error('‚ùå VIGIA: Erro ao buscar contexto do produto:', error)
      return 'Produto n√£o identificado'
    }
  }

  /**
   * üìà Busca dados reais da campanha
   */
  async getRealCampaignData(phone) {
    try {
      // Simplificado para funcionar com schema atual
      return {
        name: 'Campanha ShapeFit',
        description: 'Venda de calcinha modeladora'
      }
    } catch (error) {
      return null
    }
  }

  /**
   * üöö Informa√ß√µes v√°lidas de entrega
   */
  getValidDeliveryInfo() {
    return [
      'entrega COM pagamento na entrega APENAS para cidades COD cadastradas no sistema',
      'entrega SEM pagamento na entrega para TODAS as outras cidades (pagamento antecipado obrigat√≥rio)',
      'sempre verificar se a cidade est√° na lista COD antes de falar sobre pagamento',
      'nunca inventar modalidades de entrega que n√£o est√£o nos dados',
      'se cidade n√£o est√° na lista COD = pagamento antecipado + pedir CPF',
      'se cidade est√° na lista COD = pagamento na entrega sem frete com o motoboy'
    ]
  }

  /**
   * üí¨ Busca TODA a thread da conversa
   */
  async extractConversationContext(phone) {
    try {
      // Usar a conex√£o do banco de forma segura
      const database = db || getDatabase()
      
      // Buscar TODAS as mensagens da conversa ordenadas por data
      const messages = database.prepare(`
        SELECT direction, content, created_at, type
        FROM messages 
        WHERE lead_id = ?
        ORDER BY created_at ASC
      `).all(phone)
      
      let conversationHistory = []
      let lastUserMessage = ''
      let lastBotResponse = ''
      
      for (const msg of messages) {
        const timestamp = new Date(msg.created_at).toLocaleString('pt-BR')
        const prefix = msg.direction === 'IN' ? 'üë§ CLIENTE' : 'ü§ñ BOT'
        
        conversationHistory.push(`${prefix} (${timestamp}): ${msg.content || ''}`)
        
        if (msg.direction === 'IN') {
          lastUserMessage = msg.content || ''
        } else if (msg.direction === 'OUT') {
          lastBotResponse = msg.content || ''
        }
      }
      
      return {
        fullHistory: conversationHistory.join('\n'),
        totalMessages: messages.length,
        lastUserMessage,
        lastBotResponse,
        hasHistory: messages.length > 0
      }
    } catch (error) {
      console.error('‚ùå VIGIA: Erro ao buscar contexto da conversa:', error)
      return {
        fullHistory: 'Erro ao carregar hist√≥rico',
        totalMessages: 0,
        lastUserMessage: '',
        lastBotResponse: '',
        hasHistory: false
      }
    }
  }

  /**
   * üß† Analisa se o bot est√° inventando informa√ß√µes
   */
  async analyzeForInventions(userMessage, botResponse, realData) {
    const conversationContext = realData.conversationContext || {}
    
    const prompt = `Voc√™ √© um DETECTOR DE INVEN√á√ïES especializado em identificar quando um chatbot inventa informa√ß√µes falsas.

DADOS REAIS DO SISTEMA:
üì¶ PRODUTO - NOMES PERMITIDOS: 
- Calcinha Lipo Modeladora Premium
- Calcinha Modeladora ShapeFit  
- Calcinha Modeladora Premium
- Calcinha Lipo ShapeFit
- Descri√ß√£o: ${realData.productData?.description || 'Calcinha modeladora premium com tecnologia avan√ßada'}
- Cores: ${realData.productData?.colors?.join(', ') || 'bege, preta'}
- Tamanhos: ${realData.productData?.sizes?.join(', ') || 'P, M, G, GG'}

üí∞ PRE√áOS REAIS AUTORIZADOS (UM POR QUANTIDADE):
- 1 unidade: R$ 89,90
- 2 unidades: R$ 119,90
- 3 unidades: R$ 159,90
- 4 unidades: R$ 239,90
- 6 unidades: R$ 359,90

üèôÔ∏è CIDADES COD REAIS (70 cidades): ${realData.codCities.slice(0, 15).join(', ')}...

üöö REGRAS DE ENTREGA CORRETAS:
- Cidades na lista COD: Pagamento na entrega (sem frete)
- Cidades FORA da lista COD: Pagamento antecipado + OBRIGAT√ìRIO pedir CPF
- NUNCA inventar modalidades como "motoboy", "equipe pr√≥pria", etc
- Se cidade n√£o est√° na lista = pagamento antecipado sempre

üí¨ CONTEXTO COMPLETO DA CONVERSA (${conversationContext.totalMessages || 0} mensagens):
${conversationContext.fullHistory || 'Nenhum hist√≥rico dispon√≠vel'}

REGRAS CR√çTICAS - DETECTAR INVEN√á√ïES E REPETI√á√ïES:
‚ùå Bot N√ÉO PODE inventar cidades COD que n√£o existem
‚ùå Bot N√ÉO PODE inventar servi√ßos de entrega (ex: "motoboy" para cidades n√£o-COD)
‚ùå Bot N√ÉO PODE inventar pre√ßos n√£o autorizados
‚ùå Bot N√ÉO PODE afirmar entregas em cidades n√£o listadas
‚ùå Bot N√ÉO PODE prometer pagamento antecipado SEM pedir CPF
‚ùå Bot N√ÉO PODE repetir informa√ß√µes j√° ditas no hist√≥rico
‚ùå Bot DEVE considerar o contexto completo antes de responder
üö® CR√çTICO: Bot NUNCA pode mostrar M√öLTIPLOS PRE√áOS para a mesma quantidade (ex: "R$ 89,90 ou R$ 97,00")
üö® CR√çTICO: SEMPRE mostrar APENAS UM PRE√áO por quantidade (ex: "R$ 89,90" para 1 unidade)

MENSAGEM ATUAL DO CLIENTE: "${userMessage}"
RESPOSTA ATUAL DO BOT: "${botResponse}"

AN√ÅLISE CR√çTICA: 
1. O bot est√° inventando informa√ß√µes falsas?
2. O bot est√° repetindo algo j√° dito anteriormente?
3. O bot est√° mostrando m√∫ltiplos pre√ßos para a mesma quantidade? (CR√çTICO)
3. O bot est√° ignorando o contexto da conversa?
4. A resposta faz sentido baseada no hist√≥rico completo?

Responda APENAS o JSON v√°lido:
{
  "approved": boolean,
  "confidence": number,
  "reason": "explica√ß√£o detalhada do problema ou aprova√ß√£o",
  "suggestedResponse": "vers√£o corrigida (se necess√°rio)",
  "severity": "low|medium|high|critical",
  "inventedInfo": ["lista de informa√ß√µes inventadas"],
  "repetitionDetected": boolean,
  "contextIgnored": boolean
}`

    try {
      const completion = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: prompt },
          { 
            role: 'user', 
            content: 'Analise se h√° inven√ß√µes na resposta do bot. Responda APENAS JSON v√°lido.'
          }
        ],
        temperature: 0.1,
        max_tokens: 500
      })

      let responseText = completion.choices[0]?.message?.content || '{}'
      
      // Limpar poss√≠veis marcadores de c√≥digo e caracteres inv√°lidos
      responseText = responseText
        .replace(/```json\n?/g, '')
        .replace(/```\n?/g, '')
        .replace(/`/g, '')
        .trim()
      
      // Se n√£o come√ßar com {, procurar o primeiro { v√°lido
      if (!responseText.startsWith('{')) {
        const jsonStart = responseText.indexOf('{')
        if (jsonStart !== -1) {
          responseText = responseText.substring(jsonStart)
        }
      }
      
      const analysis = JSON.parse(responseText)
      
      // Validar estrutura
      if (typeof analysis.approved !== 'boolean') {
        throw new Error('Formato inv√°lido')
      }
      
      return analysis
      
    } catch (error) {
      console.error('‚ùå VIGIA: Erro ao processar an√°lise JSON:', error)
      console.error('‚ùå VIGIA: Erro na an√°lise:', error)
      
      // An√°lise de fallback mais rigorosa
      return this.fallbackInventionDetection(userMessage, botResponse, realData)
    }
  }

  /**
   * üîç Detec√ß√£o de fallback para inven√ß√µes
   */
  fallbackInventionDetection(userMessage, botResponse, realData) {
    const responseLower = botResponse.toLowerCase()
    const userLower = userMessage.toLowerCase()
    
    let approved = true
    let confidence = 90
    let reason = 'An√°lise b√°sica - sem inven√ß√µes detectadas'
    let severity = 'low'
    let inventedInfo = []
    
    // Detectar inven√ß√µes comuns
    
    // 1. Inven√ß√£o de servi√ßos de entrega
    if (responseLower.includes('motoboy') || responseLower.includes('entregador')) {
      approved = false
      confidence = 20
      reason = 'Bot inventou servi√ßo de motoboy/entregador n√£o oferecido'
      severity = 'high'
      inventedInfo.push('servi√ßo de motoboy/entregador')
    }
    
    // 2. Inven√ß√£o de cidades COD
    const cidadesInventadas = this.detectInventedCities(responseLower, realData.codCities)
    if (cidadesInventadas.length > 0) {
      approved = false
      confidence = 15
      reason = `Bot inventou entrega COD para cidades n√£o cadastradas: ${cidadesInventadas.join(', ')}`
      severity = 'critical'
      inventedInfo.push(...cidadesInventadas)
    }
    
    // 3. Afirma√ß√µes sobre entrega sem verificar cidade
    if (userLower.includes('cidade') && 
        (responseLower.includes('entregamos') || responseLower.includes('entrega')) &&
        !responseLower.includes('verificar')) {
      approved = false
      confidence = 30
      reason = 'Bot afirmou entrega sem verificar se cidade est√° na lista COD'
      severity = 'medium'
      inventedInfo.push('entrega n√£o verificada')
    }
    
    return { approved, confidence, reason, severity, inventedInfo }
  }

  /**
   * üèôÔ∏è Detecta cidades inventadas
   */
  detectInventedCities(response, realCities) {
    const cidadesMencionadas = []
    const palavrasChave = ['entregamos em', 'entrega para', 'atendemos', 'cod em']
    
    for (const palavra of palavrasChave) {
      if (response.includes(palavra)) {
        // Extrair poss√≠vel nome de cidade ap√≥s a palavra-chave
        const regex = new RegExp(`${palavra}\\s+([a-z√°√™√ß\\s]+?)(?:,|\\.|!|\\?|$)`, 'gi')
        const matches = response.match(regex)
        
        if (matches) {
          for (const match of matches) {
            const cidade = match.replace(palavra, '').trim().toLowerCase()
            if (cidade && cidade.length > 2 && !realCities.includes(cidade)) {
              cidadesMencionadas.push(cidade)
            }
          }
        }
      }
    }
    
    return cidadesMencionadas
  }

  /**
   * üîß Corrige resposta quando h√° inven√ß√µes
   */
  async correctResponse(phone, userMessage, originalResponse, analysis) {
    console.log(`üîß VIGIA: Corrigindo inven√ß√µes para ${phone}`)
    
    if (analysis.suggestedResponse) {
      return analysis.suggestedResponse
    }
    
    // Gerar corre√ß√£o baseada no tipo de inven√ß√£o
    try {
      const realData = await this.getRealSystemData(phone)
      
      const correctionPrompt = `Voc√™ √© um especialista em corre√ß√£o de respostas de vendas.

PROBLEMA DETECTADO: ${analysis.reason}
INFORMA√á√ïES INVENTADAS: ${analysis.inventedInfo?.join(', ') || 'N√£o especificado'}

DADOS REAIS PARA USAR:
- Cidades COD v√°lidas: ${realData.codCities.slice(0, 10).join(', ')}
- Produto: ${realData.productData?.name}

RESPOSTA PROBLEM√ÅTICA: "${originalResponse}"
PERGUNTA ORIGINAL: "${userMessage}"

INSTRU√á√ïES PARA CORRE√á√ÉO:
1. REMOVA todas as informa√ß√µes inventadas
2. Use APENAS dados reais do sistema
3. Se pergunta sobre cidade, diga para verificar se est√° na lista COD
4. N√ÉO invente servi√ßos de entrega
5. Seja honesta sobre limita√ß√µes

Gere uma resposta corrigida em portugu√™s, natural e vendedora, mas SEM INVEN√á√ïES.`

      const completion = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: correctionPrompt },
          { role: 'user', content: 'Corrija a resposta removendo as inven√ß√µes.' }
        ],
        temperature: 0.3,
        max_tokens: 200
      })

      const correctedResponse = completion.choices[0]?.message?.content || originalResponse
      
      console.log(`‚úÖ VIGIA: Resposta corrigida`)
      return correctedResponse
      
    } catch (error) {
      console.error('‚ùå VIGIA: Erro ao corrigir:', error)
      
      // Resposta de fallback segura
      return `Oi! Preciso verificar essa informa√ß√£o para voc√™. Me fala sua cidade que eu confirmo se temos entrega a√≠, ok? üòä`
    }
  }

  /**
   * üö® Notifica admin sobre inven√ß√µes detectadas
   */
  async notifyAdmin(type, message, phone) {
    try {
      const alertMessage = `üõ°Ô∏è ALERTA BOT VIGIA - INVEN√á√ÉO DETECTADA!

Tipo: ${type.toUpperCase()}
Cliente: ${phone}
Problema: ${message}
Timestamp: ${new Date().toLocaleString('pt-BR')}

‚ö†Ô∏è Bot estava inventando informa√ß√µes!
A√ß√£o tomada: Resposta corrigida automaticamente.`

      await sendWhatsAppMessage(ADMIN_PHONE, alertMessage)
      console.log(`üö® VIGIA: Admin notificado sobre inven√ß√£o`)
      
    } catch (error) {
      console.error('‚ùå VIGIA: Falha ao notificar admin:', error)
    }
  }

  /**
   * üìä Salva logs de an√°lise
   */
  saveAnalysisLog(phone, userMessage, originalResponse, analysis, finalResponse) {
    try {
      db.prepare(`
        INSERT INTO vigia_logs (
          phone, user_message, original_response, 
          analysis_result, final_response, confidence, 
          approved, invented_info, created_at
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
      `).run(
        phone,
        userMessage,
        originalResponse,
        JSON.stringify(analysis),
        finalResponse,
        analysis.confidence,
        analysis.approved ? 1 : 0,
        JSON.stringify(analysis.inventedInfo || [])
      )
    } catch (error) {
      console.error('‚ùå VIGIA: Erro ao salvar log:', error)
    }
  }

  /**
   * üéØ M√©todo principal - valida e corrige se necess√°rio
   */
  async processResponse(phone, userMessage, botResponse, conversationHistory = []) {
    console.log(`üõ°Ô∏è VIGIA: Validando resposta para ${phone}`)
    
    // 1. Analisar se h√° inven√ß√µes
    const analysis = await this.validateResponse(phone, userMessage, botResponse, conversationHistory)
    
    let finalResponse = botResponse
    
    // 2. Se detectou inven√ß√µes, corrigir
    if (!analysis.approved) {
      console.log(`üö® VIGIA: INVEN√á√ÉO DETECTADA - ${analysis.reason}`)
      
      finalResponse = await this.correctResponse(phone, userMessage, botResponse, analysis)
      
      // Notificar admin sobre inven√ß√£o
      await this.notifyAdmin('invention_detected', analysis.reason, phone)
    }
    
    // 3. Salvar log da an√°lise
    this.saveAnalysisLog(phone, userMessage, botResponse, analysis, finalResponse)
    
    console.log(`‚úÖ VIGIA: ${analysis.approved ? 'Aprovado' : 'Corrigido'} (${analysis.confidence}%)`)
    
    return finalResponse
  }

  /**
   * ÔøΩ Log da an√°lise (fun√ß√£o compatibilidade)
   */
  async logAnalysis(phone, userMessage, botResponse, result) {
    try {
      console.log(`üìä VIGIA: Log - ${phone} - ${result.approved ? 'APROVADO' : 'REJEITADO'} (${result.confidence}%)`)
      // TODO: Implementar salvamento no banco quando conectado
    } catch (error) {
      console.error('‚ùå VIGIA: Erro ao fazer log:', error)
    }
  }

  /**
   * üö® Notifica admin sobre problemas
   */
  async notifyAdmin(phone, result, userMessage, botResponse) {
    try {
      const alertMessage = `üö® ALERTA BOT VIGIA - INVEN√á√ÉO DETECTADA!

Tipo: INVENTION_DETECTED
Cliente: ${phone}
Problema: ${result.reason}
Timestamp: ${new Date().toLocaleString('pt-BR')}

‚ùå Bot estava inventando informa√ß√µes!
A√ß√£o tomada: Resposta corrigida automaticamente.`

      console.log(alertMessage)
      // TODO: Enviar para admin quando WhatsApp client estiver dispon√≠vel
      
    } catch (error) {
      console.error('‚ùå VIGIA: Falha ao notificar admin:', error)
    }
  }

  /**
   * ÔøΩüóÑÔ∏è Criar tabela de logs
   */
  createVigiaTable() {
    try {
      // Verificar se o banco est√° dispon√≠vel
      const database = db || getDatabase()
      if (!database) {
        console.log('‚ö†Ô∏è VIGIA: Database n√£o dispon√≠vel, pulando cria√ß√£o de tabela')
        return
      }
      
      database.exec(`
        CREATE TABLE IF NOT EXISTS vigia_logs (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          phone TEXT NOT NULL,
          user_message TEXT NOT NULL,
          original_response TEXT NOT NULL,
          analysis_result TEXT NOT NULL,
          final_response TEXT NOT NULL,
          confidence INTEGER NOT NULL,
          approved BOOLEAN NOT NULL,
          invented_info TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `)
      console.log('üõ°Ô∏è VIGIA: Tabela de logs inicializada')
    } catch (error) {
      console.error('‚ùå VIGIA: Erro ao criar tabela:', error)
    }
  }
}

// Inst√¢ncia singleton
export const botVigia = new BotVigia()
export { BotVigia }
