import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function demonstrarPromptCabeca() {
  try {
    console.log('üé≠ DEMONSTRA√á√ÉO: SISTEMA DE PROMPT-CABE√áA\n');
    
    // 1. Buscar produto de teste
    const product = await prisma.product.findUnique({
      where: { id: 'prod-test-template' }
    });
    
    if (!product) {
      console.log('‚ùå Produto de teste n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Produto encontrado:', product.name);
    console.log('üìù Template personalizado:');
    console.log('‚îÅ'.repeat(60));
    console.log(product.clientPrompt);
    console.log('‚îÅ'.repeat(60));
    
    console.log('\nüéØ COMO FUNCIONA O NOVO SISTEMA:\n');
    
    console.log('1Ô∏è‚É£ PRIMEIRA MENSAGEM (Cliente: "Oi, quero saber da calcinha")');
    console.log('   üîÑ Sistema detecta produto via campanha');
    console.log('   üé∞ Universal Bandits seleciona estrat√©gia: "R$ 89,90 (de R$ 149,90)"');
    console.log('   üèôÔ∏è Detecta cidade: "S√£o Paulo - SP"');
    console.log('   üé≠ Template Engine injeta placeholders');
    console.log('   üìã PROMPT-CABE√áA gerado e salvo como SYSTEM MESSAGE');
    
    console.log('\n   üìù Exemplo de PROMPT-CABE√áA final:');
    console.log('   ‚îÅ'.repeat(50));
    console.log('   Oi, eu sou a AMANDA! üåü');
    console.log('   ');
    console.log('   Soube que voc√™ se interessou pela nossa Calcinha Modeladora - √© uma das melhores!');
    console.log('   ');
    console.log('   üéØ ESTRAT√âGIA ATUAL: Desconto Premium');
    console.log('   üí∞ Pre√ßo especial: R$ 89,90 (de R$ 149,90)');
    console.log('   üèôÔ∏è Voc√™ est√° em: S√£o Paulo - SP');
    console.log('   üì¶ Entrega: Entrega r√°pida com pagamento na entrega!');
    console.log('   ');
    console.log('   Que tal conversar sobre como ela pode te ajudar? üòç');
    console.log('   ‚îÅ'.repeat(50));
    
    console.log('\n2Ô∏è‚É£ THREAD DE CONVERSA INICIADA:');
    console.log('   [SYSTEM] -> Prompt-cabe√ßa (instru√ß√µes fixas)');
    console.log('   [USER]   -> "Oi, quero saber da calcinha"');
    console.log('   [ASSISTANT] -> GPT responde baseado no prompt-cabe√ßa');
    
    console.log('\n3Ô∏è‚É£ MENSAGENS SEGUINTES (Cliente: "Quanto custa?")');
    console.log('   üîÑ Mensagem adicionada √† MESMA THREAD');
    console.log('   üß† GPT mant√©m TODA a conversa + prompt-cabe√ßa');
    console.log('   üéØ Resposta √© ancorada no template mas generativa');
    
    console.log('\n   üìã Thread completa:');
    console.log('   [SYSTEM]    -> Prompt-cabe√ßa (SEMPRE presente)');
    console.log('   [USER]      -> "Oi, quero saber da calcinha"');
    console.log('   [ASSISTANT] -> "Ol√°! Que bom que se interessou pela nossa calcinha..."');
    console.log('   [USER]      -> "Quanto custa?"');
    console.log('   [ASSISTANT] -> GPT responde usando contexto COMPLETO');
    
    console.log('\n4Ô∏è‚É£ VANTAGENS DO SISTEMA:');
    console.log('   ‚úÖ Prompt-cabe√ßa NUNCA √© perdido');
    console.log('   ‚úÖ Cada produto tem seu pr√≥prio template');
    console.log('   ‚úÖ Estrat√©gias ML injetadas dinamicamente');
    console.log('   ‚úÖ Contexto completo mantido em cada resposta');
    console.log('   ‚úÖ Respostas generativas mas ancoradas');
    console.log('   ‚úÖ Uma thread por cliente = conversa coerente');
    
    console.log('\nüéâ SISTEMA IMPLEMENTADO E FUNCIONANDO!');
    console.log('\nüîó Para testar:');
    console.log('   1. Acesse o dashboard em http://localhost:3000');
    console.log('   2. V√° para a se√ß√£o de Produtos');
    console.log('   3. Clique em qualquer produto');
    console.log('   4. Edite o "Template de Conversa Personalizado"');
    console.log('   5. Use os placeholders dispon√≠veis');
    console.log('   6. Salve e teste com conversas reais');
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

demonstrarPromptCabeca();
