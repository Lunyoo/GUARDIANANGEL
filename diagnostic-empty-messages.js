#!/usr/bin/env node

/**
 * üîç DIAGN√ìSTICO COMPLETO - Onde o sistema falha com mensagens vazias?
 * 
 * Este script vai testar CADA PONTO do fluxo para encontrar exatamente
 * onde as mensagens vazias conseguem passar.
 */

import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Simular o ambiente do backend
process.chdir(join(__dirname, 'backend'))

console.log('üîç === DIAGN√ìSTICO COMPLETO: MENSAGENS VAZIAS ===')
console.log('')

async function testConversationGPT() {
  try {
    console.log('1Ô∏è‚É£ TESTANDO: conversationGPT_fixed.ts')
    console.log('   ‚Ü≥ Pode gerar resposta vazia quando recebe entrada vazia?')
    
    const { processConversationMessage } = await import('./backend/src/services/bot/conversationGPT_fixed.js')
    
    // Testar diferentes tipos de entrada vazia
    const testCases = [
      { name: 'String vazia', input: '' },
      { name: 'Undefined', input: undefined },
      { name: 'S√≥ espa√ßos', input: '   ' },
      { name: 'S√≥ quebras', input: '\n\n' }
    ]
    
    for (const testCase of testCases) {
      console.log(`\n   üìù Teste: ${testCase.name}`)
      console.log(`   üìû Phone: 5511999999999`)
      console.log(`   üí¨ Input: "${testCase.input}"`)
      
      try {
        const result = await processConversationMessage('5511999999999', testCase.input)
        
        if (!result || result.trim().length === 0) {
          console.log(`   ‚ùå PROBLEMA ENCONTRADO! Retornou vazio: "${result}"`)
        } else {
          console.log(`   ‚úÖ OK: "${result.substring(0, 50)}..."`)
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Erro: ${error.message}`)
      }
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erro ao importar: ${error.message}`)
  }
}

async function testWhatsAppClient() {
  try {
    console.log('\n2Ô∏è‚É£ TESTANDO: whatsappClient_wwjs.ts')
    console.log('   ‚Ü≥ A valida√ß√£o EMPTY_MESSAGE_BLOCKED funciona?')
    
    const { sendWhatsAppMessage } = await import('./backend/src/services/bot/whatsappClient_wwjs.js')
    
    const testCases = [
      { name: 'String vazia', message: '' },
      { name: 'S√≥ espa√ßos', message: '   ' },
      { name: 'S√≥ quebras', message: '\n\n' }
    ]
    
    for (const testCase of testCases) {
      console.log(`\n   üìù Teste: ${testCase.name}`)
      console.log(`   üìû Phone: 5511999999999`)
      console.log(`   üí¨ Message: "${testCase.message}"`)
      
      try {
        await sendWhatsAppMessage('5511999999999', testCase.message)
        console.log(`   ‚ùå PROBLEMA! Mensagem vazia passou pela valida√ß√£o!`)
      } catch (error) {
        if (error.message === 'EMPTY_MESSAGE_BLOCKED') {
          console.log(`   ‚úÖ OK: Valida√ß√£o bloqueou mensagem vazia`)
        } else {
          console.log(`   ‚ö†Ô∏è  Erro inesperado: ${error.message}`)
        }
      }
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erro ao importar: ${error.message}`)
  }
}

async function testInboundProcessor() {
  try {
    console.log('\n3Ô∏è‚É£ TESTANDO: inboundProcessorGPT.ts')
    console.log('   ‚Ü≥ Como processa mensagens vazias do WhatsApp?')
    
    const { processInbound } = await import('./backend/src/services/bot/inboundProcessorGPT.js')
    
    const testMessage = {
      from: '5511999999999@c.us',
      body: '', // MENSAGEM VAZIA
      timestamp: Date.now() / 1000,
      type: 'chat',
      hasMedia: false
    }
    
    console.log(`\n   üìù Simulando mensagem WhatsApp vazia`)
    console.log(`   üìû From: ${testMessage.from}`)
    console.log(`   üí¨ Body: "${testMessage.body}"`)
    
    try {
      const result = await processInbound(testMessage)
      
      console.log(`\n   üìä RESULTADO:`)
      console.log(`   ‚úì Success: ${result.success}`)
      console.log(`   ‚úì Response: "${result.response}"`)
      console.log(`   ‚úì TypingDelay: ${result.typingDelay}`)
      
      if (result.success && result.response && result.response.trim().length > 0) {
        console.log(`   ‚úÖ OK: Sistema tratou mensagem vazia e gerou resposta`)
      } else {
        console.log(`   ‚ùå PROBLEMA: Sistema n√£o conseguiu tratar mensagem vazia`)
      }
      
    } catch (error) {
      console.log(`   ‚ùå Erro no processamento: ${error.message}`)
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erro ao importar: ${error.message}`)
  }
}

async function testBotVigia() {
  try {
    console.log('\n4Ô∏è‚É£ TESTANDO: botVigia.ts')
    console.log('   ‚Ü≥ O Vigia pode gerar resposta vazia?')
    
    const { BotVigia } = await import('./backend/src/services/bot/botVigia.js')
    
    const vigia = new BotVigia()
    
    const testCases = [
      { 
        name: 'Resposta vazia do GPT', 
        originalMessage: 'oi',
        assistantResponse: ''
      },
      { 
        name: 'Resposta s√≥ espa√ßos', 
        originalMessage: 'oi',
        assistantResponse: '   '
      }
    ]
    
    for (const testCase of testCases) {
      console.log(`\n   üìù Teste: ${testCase.name}`)
      console.log(`   üí¨ Original: "${testCase.originalMessage}"`)
      console.log(`   ü§ñ Assistant: "${testCase.assistantResponse}"`)
      
      try {
        const result = await vigia.processResponse(
          testCase.assistantResponse,
          testCase.originalMessage,
          '5511999999999',
          []
        )
        
        if (!result || result.trim().length === 0) {
          console.log(`   ‚ùå PROBLEMA! Vigia retornou vazio: "${result}"`)
        } else {
          console.log(`   ‚úÖ OK: "${result.substring(0, 50)}..."`)
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Erro: ${error.message}`)
      }
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erro ao importar: ${error.message}`)
  }
}

// Executar todos os testes
async function runDiagnostic() {
  console.log('üöÄ Iniciando diagn√≥stico completo...\n')
  
  await testConversationGPT()
  await testWhatsAppClient()
  await testInboundProcessor()
  await testBotVigia()
  
  console.log('\nüéØ === AN√ÅLISE ===')
  console.log('Se algum teste falhou, esse √© o ponto onde as mensagens vazias escapam!')
  console.log('Se todos passaram, o problema pode estar na integra√ß√£o entre os m√≥dulos.')
  console.log('\nüèÅ Diagn√≥stico finalizado!')
}

runDiagnostic().catch(console.error)
