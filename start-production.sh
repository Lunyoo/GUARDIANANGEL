#!/bin/bash

# Script de produÃ§Ã£o otimizado para VPS
# Reduz uso de CPU e memÃ³ria

echo "ðŸš€ Iniciando Guardian Angel em modo produÃ§Ã£o otimizado..."

# ConfiguraÃ§Ãµes de ambiente para produÃ§Ã£o
export NODE_ENV=production
export PORT=3001
export AUTO_DB=1
export DATABASE_URL=file:./backend/prisma/neural_system.db
export JWT_SECRET=${JWT_SECRET:-prodsecret}
export ADMIN_EMAIL=${ADMIN_EMAIL:-admin@test.com}

# OtimizaÃ§Ãµes de CPU/MemÃ³ria
export NODE_OPTIONS="--max-old-space-size=512 --optimize-for-size"
export WA_HEADLESS=true

# Desabilitar features pesadas em VPS pequena (opcional)
# export ALLOCATOR_AUTO=false
# export ALLOCATOR_AUTO_ENROLL_CRON=false

echo "ðŸ“¦ Construindo frontend..."
npm run build

echo "ðŸ“¦ Construindo backend..."
cd backend && npm run build && cd ..

echo "ðŸŽ¯ Servindo aplicaÃ§Ã£o em modo produÃ§Ã£o..."
echo "Frontend: http://localhost:3000"
echo "Backend: http://localhost:3001"

# Inicia backend em produÃ§Ã£o
cd backend && npm start &
BACKEND_PID=$!

# Aguarda backend inicializar
sleep 5

# Serve frontend estÃ¡tico via servidor simples
cd .. && npx serve dist -l 3000 &
FRONTEND_PID=$!

echo "âœ… AplicaÃ§Ã£o rodando!"
echo "Backend PID: $BACKEND_PID"
echo "Frontend PID: $FRONTEND_PID"

# Cleanup function
cleanup() {
    echo "ðŸ›‘ Parando aplicaÃ§Ã£o..."
    kill $BACKEND_PID 2>/dev/null
    kill $FRONTEND_PID 2>/dev/null
    exit 0
}

# Trap signals
trap cleanup SIGINT SIGTERM

# Aguarda
wait
